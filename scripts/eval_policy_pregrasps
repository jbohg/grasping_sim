#!/usr/bin/env python3


# Copyright (c) 2018 Max Planck Gesellschaft
# Author : Hamza Meric
# License : License BSD-3-Clause

import argparse, sys, os, os.path as osp, time
import numpy as np
from baselines.common import set_global_seeds, tf_util as U
import tensorflow as tf
from natsort import natsorted
from collections import defaultdict

from grasping_env import GraspingEnv, load_config, make_from_config
from grasping_env.utils import load_pregrasps


def fix_checkpoint_file(policy_path):
    file_path = osp.join(policy_path, "checkpoint")
    assert osp.isfile(file_path), "Checkpoint file missing!"

    with open(file_path, 'r') as chck_file:
        lines = chck_file.readlines()

    with open(file_path, 'w') as chck_file:
        for line in lines:
            if '"' not in line:
                chck_file.write(line)
                continue
            else:
                l_idx, r_idx = line.index('"') + 1, line.rindex('"') - 1
                path = line[l_idx:r_idx + 1]
                new_path = osp.normpath(osp.join(policy_path, osp.basename(path)))
                new_line = line.replace(path, new_path)
                chck_file.write(new_line)


def main(policy_path):
    fix_checkpoint_file(policy_path)
    sess = U.make_session(num_cpu=1)
    sess.__enter__()
    set_global_seeds(0)

    # If config exists, load it from yaml file.
    assert osp.isfile(osp.join(policy_path, "config.yaml")), "Config file is not present!"
    config = load_config(osp.join(policy_path, "config.yaml"))
    env = make_from_config(config)
    assert str(env) == "GraspingEnvPregrasps", "Not a pre-grasp environment!"
    env.log = defaultdict(list)

    meta_files = natsorted([file for file in os.listdir(policy_path) if file.endswith(".meta")])
    model_meta_path = osp.join(policy_path, meta_files[-1])
    loader = tf.train.import_meta_graph(model_meta_path)
    loader.restore(sess, tf.train.latest_checkpoint(policy_path))
    pi = tf.get_default_graph().get_tensor_by_name("pi/pi:0")
    ob = tf.get_default_graph().get_tensor_by_name("pi/ob:0")
    grad = tf.abs(tf.gradients(pi, [ob])[0])

    pi = sess.make_callable(pi, feed_list=[ob, 'pi/stoch:0'])
    grad = sess.make_callable(grad, feed_list=[ob, 'pi/stoch:0'])
    def actor(obs):
        return pi(obs[None], False)[0]
    if hasattr(env, "set_actor"):
        env.set_actor(actor)

    # Set up the evaluation pre-grasps.
    env.obj_pregrasps.clear()
    env.obj_phys_scores.clear()
    for obj in env.objects:
        pregrasps_file = env.gazebo_grasping_path + "/models/" + obj + "/pregrasps_test.pkl"
        assert osp.isfile(pregrasps_file), "Pregrasps file not found!"
        env.obj_pregrasps[obj], env.obj_phys_scores[obj] = load_pregrasps(pregrasps_file, 0)

    try:
        pregrasps = env.obj_pregrasps[env.object]
        for idx in range(len(pregrasps)):
            print("{}/{}".format(idx + 1, len(pregrasps)))
            env.custom_pregrasp = pregrasps[idx]
            print("Pregrasps physics score: {}".format(env.obj_phys_scores[env.object][idx]))
            obs = env.reset()
            done = False
            rewards = []
            start = time.time()
            while not done:
                obs, reward, done, _ = env.step(actor(obs))
                rewards.append(reward)
            print("Duration: {}".format(time.time() - start))
            print("Reward:        {}".format(sum(rewards)))
            if env.success:
                print("Drop test:      SUCCESS!")
            else:
                print("Drop test:      FAIL!")
    except Exception as err:
        print(err)
        pass
    env.close()


if __name__ == "__main__":
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('policy_path', nargs='?', default='.', type=str,
                        help="Path of the policy network graph.")
    args = parser.parse_args()
    main(args.policy_path)
